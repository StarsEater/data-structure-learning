排序：
  快速排序
  将序列分为子序列： S= SL + SR
  规模缩小：max { |SL|,|SR|} < n
  彼此独立 ： max(SL) <= min(SR)
  递归实现
  平凡解：只剩下单个元素本身就是解
  轴点(pivot): 左/右侧的元素，均不比他更大/小
  以轴点为界，原序列划分自然实现
   [lo,hi) = [lo,mi) + [mi] + (mi,hi)
   template <typename T> void Vector<T> ::quickSort( Rank lo, Rank hi){
    if ( hi - lo < 2) return ;
    Rank mi = partition( lo, hi-1);//先构造轴点，再前缀排序，后缀排序
    quickSort(lo, mi); 
    quickSort(mi + 1, hi);
   }
   原始序列中，轴点未必存在;
   必要条件：轴点必定已然就位
   特别的，在有序序列中，所有元素皆为轴点，反之亦然
   快速排序就是将所有元素逐个转换为轴点的过程，通过适当交换，可使任意元素变为轴点
   L <= pivot <= G; U =[lo, hi]中，[lo]和[hi]交替空闲
   while( lo < hi && pivot <= _elem[hi]) hi--;
   _elem[lo] = _elem[hi];
     while( lo < hi && pivot >= _elem[lo]) lo++;
   _elem[hi] = _elem[lo];
   性能分析：
     unstable: lo/hi的移动方向相反，左/右侧大/小重复元素可能前/后颠倒
     in-place：只需要O(1)的附加空间
   最好：每次划分(接近)平均，轴点总是(接近)中央
   T( n ) = 2*T((n-1)/2) + O(n) = O(nlogn)
   最坏：每次划分都极不均匀
   T( n ) = T(n-1) + T(0) + T(n) = O(n^2)
   平均:
     以均匀独立分布为例
     T(n) = n + 1 + 1/n {求和( k ~ [0,n-1])[T(k) + T(n-k-1)]} 
   变种:
    四部分 S=[lo] + L(lo,mi] + G(mi,k) + U(k,hi)
    L< pivot <=G
    [k] 不小于轴点 ? 直接G拓展 ： G滚动后移，L拓展
    pivot <= S[k] ? k++ : swap( S[++mi], S[k++])
    lo... L... mi....G.....k....U....hi
    template < typename T> Rank Vector<T> ::partition(Rank lo, Rank hi){[lo,hi]
      swap( _elem[lo], _elem[lo + rand() % (hi - lo + 1)])
      T pivot = _elem[lo]; int mi = lo;
      for ( int k = lo + 1; k <= hi; k++ )//自左向右考察每个[k]
        if ( _elem[k] < pivot )      //若[k]小于轴点，则将其与[mi]交换，
          swap ( _elem[ ++mi], _elem[k]);//L向右扩展
      swap( _elem[lo], _elem[mi]); //候选轴点归位
      return mi; 返回轴点的秩
    }
    
    选取：众数
    k-selection ：在 任意一组可比较大小的元素中，如何由小到大，找到次序为k
    者，即在这组元素的非降序列S中，找出S[k],S[下取整(n/2)]
    众数:无序向量中，若有一半以上的元素同为m，则称为众数
    众数是中位数
    中位数验证是否是众数
    template <typename T> bool majority( Vector <T> A, T & maj){
      return majEleCheck( A, maj = median( A ));
    }
    若在向量A的前缀P( |P|为偶数)中，元素x出现的次数恰占半数，
    则A有众数仅当，对应的后缀A-P有众数m，且m就是A的众数
    ........A......
    ..P...A-P......
    设A的众数为m，
      若 x = m ，则在排除前缀P，m与其他元素在数量上的差距保持不变
      若 x != m,则在排除前缀P之后，m与其他元素在数量上的差距不致缩小
    template < typename T> T majEleCandidate( Vector <T> A){
      T maj;//众数候选者
      //线性扫描:借助计数器c，记录maj与其他元素的差额
      for ( int c = 0, i = 0; i < A.size(); i++)
        if ( 0 == c){//每当c归零，意味着此时前缀P可以剪除
           maj = A[i]; c = 1; 
        }
        else 
          maj == A[i]? c++ : c--;
     return maj;  
     }
     template < typename T> void quickSelect( Vector<T> &  A, Rank k){
       for (Rank lo = 0, hi = A.size() -1; lo < hi){
         Rank i = lo, j = hi;
         T pivot = A[lo];
         while ( i < j ){
           while ( i < j && pivot < = A[j]) j--;A[i] = A[j];
           while ( i < j && A[j]  <= pivot) i++;A[j] = A[i];
         }
         A[i] = pivot;
         if ( k < = i) hi = i - 1;
         if ( i < = k) lo = i + 1;
       }
     }
     LinearSelect()
     Let Q be a small constant
     0. if ( n = |A| < Q) return trivialSelect( A, k);  ///0. O(QlogQ)
     1. else divide A evenly into  n/Q subsequences ( each of size Q)// 1.O(n)
     2. sort each subsequence and determine n/Q medians//2. O(n)=O(QlogQ) * n/Q
     3. Call linearSelect to find M, median of medians //3. T(n/Q)
     4. Let L/E/G = { x < / = / > M | x 属于 A } // 4. O(n)
     if ( k <= |L|) return linearSelect( L, k)   // 5. T(3/4*n)
     if ( k <= |L| + |E|) return M
     return linearSelect( G, k -|L| -|E| )
   复杂度
    在某种意义上，如上所确定的M必然不偏不倚，至少各有n/4个元素，不小于/不大于M
    n/Q个中位数中，至少半数不小于M，而他们又各自不大于至少Q/2个元素
     n/Q /2 * Q/2 = n/4
     
    T(n) = O(n) + T(n/Q) + T(3/4*n) 
    n/Q + 3/4*n < n
    ----------------------------------------
    希尔排序： Shell序列
    将整个序列视作一个矩阵，逐列各自排序 w-sorting
    递减增量
      由粗到细：重排矩阵，使其更窄，再逐列排序 w-ordered
      逐步求精: 如此往复，直至矩阵变为一列 1-sorting
      步长序列：由各矩阵宽度构成的逆序列
      H = { w1 = 1, w2, w3, w4, w5, .. wk,....}
      k 行 i 列
      a[ i + k w] (0<= k < n/w)
      选择排序输入敏感的特性
      f = mg + nh  g、h --m、n
      N(g,h) = { }
      x(g,h) = max( N(g,h)) = (g-1)(h-1) -1
      h-ordered : 任何h,S[i] < S[i+h]
      A 1-ordered sequence is sorted
      A g-ordered sequence remains g-ordered after being h-sorted
      g-ordered h-ordered --> (g+h)-ordered (mg + nh)-ordered
      (g-1)(h-1)-unordered 为逆序对范围，不断缩小逆序对的总数
