高级搜索树
 局部性：
   Locality：刚被访问的数据，极有可能很快地再次被访问
 BST:
   刚刚被访问地节点，极有可能很快地再次被访问
   下一将要被访问地节点，极有可能就在刚被访问过的节点的附近
   m次查找 O(mlogn)
   逐层扩展：节点v一旦被访问，随即转移至树根
   自下而上，逐层单旋(zig,zag)
   最坏情况：
     旋转次数呈周期地算术级数演变，每个周期累计omg(n^2),分摊omg(n^2)
   构思精髓：向上追溯两层，而非一层
   zig-zag/zag-zig
   与AVL树双旋完全等效
   与一层等效
   zig-zig/zag-zag
   折叠效果：一旦访问坏节点，对应路径地长度将随机减半
   最坏情况不致持续发生
   单趟伸展操作，分摊O(logn);
   
   算法实现：
     template <typename T>
     class Splay: public BST<T>{
     protected: BinNodePosi(T) splay( BinNodePosi(T) v);//将v伸展至树根
     public: //伸展树地查找也会引起整树的结构调整，故search()也需要重写
     BinNodePosi(T) & search( const T & e);
     BinNodePosi(T) & insert( const T & e);
     bool remove( const T & e);
     } 
     template <typename T> BinNodePosi(T) Splay<T>::splay(BinNodePosi(T) v){
       if (! v) return NULL;
       BinNodePosi(T) p,g;
       while ((p = v->parent) && (g = p->parent)){ //自下而上，反复双层扩展
        BinNodePosi(T) gg = g->parent; //每轮之后，v都将以原曾祖父为父
        if( IsLChild( *v))
          if( IsRChild ( * p)){/*zig-zig*/ }else {/*zig-zag*/}
        else if(IsRChild ( *p)){/*zag-zag*/}else {/*zag-zig*/}
        if( !gg) v->parent = NULL; //若无曾祖父gg，则v 现即为树根；否则gg以v为孩子
        else( g == gg->lc) ? attachAsLChild(gg, v) : attachAsRChild(gg, v);
      }//双层伸展结束时，必有g==NULL，但p可能非空
      if( p = v->parent){/* 若p果真是根，只需在额外单旋（至多一次）*/}
      v->parent = NULL;return v;//伸展完成，v抵达树根
     }
    if (IslChild(* v))
      if (IsLChild( *p)){ //zig-zig
        attachAsLChild( g, p->rc);
        attachAsLChild( p, v->rc);
        attachAsRChild( p, g );
        attachAsRChild( v, p);
      }
      else{ /*zig-zag*/}
      else 
        if (IsRChild( *p)){/* zag-zig*/}
        else{ /*zag-zig*/}
     
     查找算法 非静态操作
     template <typename T> BinNodePosi(T) Splay<T>::search(const T & e){
     BinNodePosi(T) p = searchIn( _root, e, _hot = NULL);
     //无论成功与否，最后被访问的节点都将伸展至根
     _root = splay( p ? p : _hot);
     return _root;
     }
     插入算法
     删除算法
     
     局部性强，缓存命中率极高(即k << n << m)
     k 经常访问的数据范围  n 总数据范围 m访问
     效率甚至更高 --自适应的o(logk)
     任何连续的m次查找，都可在o(mlogk + nlogn)时间内完成
     --------------------------------------------------
     B-树
     严格意义非BST
     高速缓存
     1、内存与硬盘读写速度 10^5
     2、硬盘读写1B 与 1kB 几乎相同耗时
     
     平衡的多路搜索树
     二叉搜索树
      经适当合并，得超级节点
       每2代合并：4路
       每3代合并：8路
       每d代合并：m = 2^d路，m-1个关键码
       多级存储系统中使用B-树，可针对外部查找，大大减少I/O次数
       B-树利用对外存批量访问的高效性，每下降一层，都以超级节点为单位，读入一组关键码
       m阶B-树，m路平衡搜索树(m >= 2)
       外部节点和所有叶节点的深度统一相等（B树高度相对外节点）
       内部节点（m为阶次）
         不超过m-1个关键码 k1,k2,k3,...kn
         不超过m个分支     A0,A1,A3,...An+1
       内部节点的分支数n+1也不能太少
         树根 :2 <= n + 1
         其余 ：上取整[m/2] <= n + 1
       也称作([m/2],m)-树
       
       定义与实现
       BTNode节点定义
       template <typenname T> struct BTNode{
         BTNodePosi(T) parent; //父
         Vector<T> key; //数值向量
         Vector< BTNodePosi(T) > child;//孩子向量（其长度总比key多一）
         BTNode(){parent = NULL; child.insert(0, NULL);}
         BTNode(T e, BTNodePosi(T) lc = NULL, BTNodePosi(T) rc =NULL){
           parent = NULL;
           key.insert( 0 , e);
           child.insert( 0, lc);
           child.insert( 1, rc);
           if( lc) lc->parent = this;
           if (rc) rc->parent = this;
         }
       }
       BTree定义
       #define BTNodePosi(T) BTNode<T>*
       template <typename T> class BTree{
         protected:
           int _size; int _order;BTNodePosi(T) _root;
           //关键码总数、阶次、根
           BTNodePosi(T) _hot;//search()最后访问的非空节点
           void solveOverflow ( BTNodePosi(T));//因插入而上溢后的分裂处理
           void solveUnderflow ( BTNodePosi(T));//因删除而下溢后的合并处理
         public:
           BTNodePosi(T) search( const T & e);
           bool insert( const T & e );
           bool remove( const T & e );
       };
       查找：
        template <typename T> BTNodePosi(T)::search( const T & e)
        BTNodePosi(T) v = _root;  //从根节点出发
        _hot = NULL;
        while (v){
          Rank r = v->key.search(e);//从从当前节点对应的向量中顺序查找
          if ( 0 <= r && e == v->key[r]) return v;
          _hot = v; v = v->child[r + 1]; //沿引用转至对应的下层子树，并载入其根I/O
        } //因!v而退出，则意味着抵达外部节点   
        return NULL; //失败
        }
        最大树高
         含N个关键码的m阶B-树，          
         为此各层节点依次为 n0=1,n1=2,n2=2*[m/2]..
         nk = 2*[m/2]^(k-1)
        考察外部节点所在层  (注：[]上取整，{}下取整)
        //N种成功查找，N+1种失败查找
        N+1 = nh >= 2 *([m/2])^(h-1);
        h <= 1 + log[m/2]{(N+1)/2} = O(logmN)
        相对于BBST
        log[m/2]{(N+1)/2}/logN = 1/(log[m]-1)
        最小树高
        n0 = 1,n1= m,....,mh-1=m^(h-1)
        N+1 = nh <= m^h
        h>=logm(N+1)=omg(logmN)
        相对于BBST
        logm(N+1) / logN = 1/log2m
        
        插入实现
        template<typename T>
        bool BTree<T>::insert( const T & e){
          BTNodePosi(T) v = search(e);
          if (v) return false;
          Rank r = _hot->key.search(e);
          _hot->key.insert(r+1, e);
          _hot->child.insert(r+2, NULL);
          _size++;solveOverflow( _hot);//若发生上溢，需做分裂
          return true; 
        }
        中位数A[0,n) A[下取整(n/2)] A[0,5)->A[2] A[0,6)->A[3]
        设上溢节点中的关键码k0,k1,..km-1
        取中位数s = 下取整(m/2)，以关键码ks为界划分
        k0,k1,k2,...ks-1,   ks,   ks+1,....km-1
        关键码ks上升一层,并
        分裂split:以所得的两个节点为左右孩子
        
        删除
        template<typename T>
        bool BTree<T>::remove( const T & e){
          BTNodePosi(T) v = search(e);
          if (!v) return false; 
          Rank r = v->key.search(e);
          if (v->child[0]){//若v非叶子，则在右子树中一直向左
             BTNodePosi(T) u = v->child[r + 1];//找到e的后继（必属于某叶子节点）
             while ( u->child[0]) u = u->child[0];//并与之交换
             v->key[r] = u->key[0]; v= u; r = 0;
          } //至此，v必然位于最底层,且其中第r个关键码就是待删除者
         v->key.remove(r); v->child.remove(r+1);_size--;
         solveUnderflow(v);return true;
        }
        -------------------------------------------
        红黑树
        持久性：保存历史版本
        AVL 插入O(1)，删除O(logn)
        定义：
           由红、黑两类节点组成的BST
           （统一增设外部节点NULL，使之成为真二叉树）
           1、树根：必为黑色
           2、外部节点：均为黑色
           3、其余节点：若为红，则只能有黑孩子
           4、外部节点到根：途中黑节点数目相等//黑深度
        保存差异-》任何一次动态操作引发的结构变化两不致超过O(1)
        提升变换
        提升各红节点，使之与其（黑）父亲等高--于是每棵红黑树都对应于(2,4)-树
        将黑节点与其红孩子视作(关键码并合并为)超级节点
        无非四种组合，分别对应于4阶B-树的一类内部节点
        template<typename T>class RedBlack :public BST<T>{
          public : //BST::search()等其余接口可直接沿用
              BinNodePosi(T) insert( const T & e);
              bool remove( const T & e);
          protected : void solveDoubleRed( BinNodePosi(T) x); //双红修正
                      void solveDoubleBlack( BinNodePosi(T) x);//双黑修正
                      int updateHeight( BinNodePosi(T) x); //更新节点黑高度
        };
        template <typename T> int RedBlack<T>::updateHeight( BinNodePosi(T) x){
          x->height = max (stature (x->lc), stature (x->rc));
          if (IsBlack(x)) x->height++;
          return x->height;
        }
       插入算法：
        rb-tree  <-- B-tree
       双红缺陷
           g ~ p ~ x
       x的祖父 g = p->parent
       p的兄弟 u = (p==g->lc)?g->rc:g->lc;
       对u的颜色分两种情况处理
       template <typename  T> BinNodePosi(T) RedBlack::insert( const T &){
          //确认目标节点不存在(留意对_hot的设置)
          BinNodePosi(T) & x = search(e);
          if(x) return x;
          //创建红节点x，以_hot为父，黑高度-1
          x = new BinNode<T> (e, _hot, NULL, NULL, -1);
          _size++;
          //如有必要，需双红修正
          solveDoubleRed(x);
          return x? x : _hot->parent;
       }//无论原树是否存在e，返回时总有x->data == e
    RR1: u->color == B
       1 参照AVL树算法，做局部3+4重构
         将节点x,p,g及其四棵子树，按中序组合为：
         Ta < a < T1 < b < T2 < c < T3
       2 染色： b转黑，a或c转红
       从B-树角度：
        1 调整前之所以非法，因为
           在某个三叉节点中插入红关键码，使得原黑关键码不再居中 RRB,BRR
        2 调整之后效果相当于
           在新的四叉节点中，三个关键码的颜色改为RBR，B-树的拓扑结构不变
    RR2: u->color == R
        在B-树中超级节点发生上溢
        p与u转黑，g转红
        在B-树，等效于节点分裂，关键码g上升一层
     复杂度
       重构、染色均属于常数时间
       O(logn)的节点染色，一次“3+4”重构
       
       删除算法
       B-树的下溢缺陷
       在新树中，考察
         r的父亲 p = r->parent
         r的兄弟 s = (r == p->lc)?p->rc:p->lc;
       BB-1:s为黑，且至少有一个红孩子t
            3+4重构：t,s,p 重命名为a,b,c
            r保持黑；a和c染黑；b继承p的颜色
            
