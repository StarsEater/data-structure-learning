优先级队列
算法(server algorithm) <--------------------  数据(clients data)
      |                                         |     
      |                                         |
scheduler(调度器)<--priority queue <--------- 重要性指标(important priority)  
接口定义
template <typename T> struct PQ{
  virtual void insert(T) = 0;
  virtual T getMax() = 0;
  virtual T delMax() = 0;
};
只需查找极值元素，不必维护所以元素的全序关系
 
 完全二叉堆
 平衡因子处处非负的AVL   0 / 1
 若bf(v) = 0,则 lc(v)满
 若bf(v) = 1,则 rc(v)满
 完全二叉树
 逻辑节点与物理元素依层次遍历次序彼此对应
 #define Parent(i) ((i-1)>>1)
 #define LChild(i) (1 + (i<<1)) //奇数
 #define RChild(i) ((1 + i) <<1) //偶数
 
 template <typename T> class PQ_ComplHeap:public PQ<T>, public Vector<T>{
   protected : Rank percolateDown( Rank n, Rank i);//下滤
               Rank percolateUp (Rank i ); //上滤
               void heapify( Rank n); //Floyd建模算法
   public    : PQ_ComplHeap( T * A, Rank n)//p批量构造{
                  copyFrom( A, 0, n);
                  heapify(n);
               }
               void insert(T);
               T getMax(){return _elem[0];}
               T delMax(); 
 }      
 数值上，只要 0 < i，必满足H[i] <= H[Parent(i)]
 
 template <typename T> PQ_ComplHeap<T>::getMax(){
   return _elem[0];
 }
 插入及上滤
 template <typename T> PQ_ComplHeap<T>::insert( T e){
   Vector<T>::insert(e);
   percolateUp(_size -1);
 }
 template <typename T> PQ_ComplHeap<T>::percolateUp( Rank i){
   while ( ParentValid(i)){
     Rank j = Parent(i);
     if( lt( _elem[i],_elem[j])) break;
     swap (_elem[i], _elem[j]);
     i = j;
   }
   return i;
 }
 删除和下滤
  template <typename T> PQ_ComplHeap<T>::delMax(){
   T maxElem = _elem[0];
   _elem[0] = _elem[ --_size];
   percolateDown(_size,0);
   return maxElem;
 }
 template <typename T> PQ_ComplHeap<T>::percolateDown( Rank i){
   Rank j;
   while ( i!= ( j = ProperParent ( _elem, n, i))){
     swap (_elem[i], _elem[j]);
     i = j;
   }
   return i;
 }
 批量建堆
 PQ_ComplHeap( T * A, Rank n){
   copyFrom( A, 0, n);
   heapify(n);
 }
 version 1(自上而下的上滤)
 template <typename T> PQ_ComplHeap<T>::heapify( Rank n){
   for ( int i = 1; i < n; i ++)
     percolateUp(i);
 }
 version 2(自下而上的下滤)
template <typename T> PQ_ComplHeap<T>::heapify( Rank n){
   for ( int i = LastInternal(n); i >=0; i --)
     percolateDown(n,i);
 }
