串
由来自字母表的字符构成的有限序列
S[0,n)  S[k]
相等： S[0,n) = T[0,m) ( n = m, 且对应的字符均相等)
子串 S.substr(i, k) = S[i, i+k), 0 <=i < n, 0 <=k
   即，从S[i]起的连续k个字符
前缀：S.prefix(k) = S.substr(0,k) = S[0,k)
空串和本身是任何串的字串、前缀、后缀

串匹配：
% grep <pattern> <text>
文本T 模式P
记 n = |T|, m = |P| , n>>m>>2
算法评测：
 随机T堆成功、失败的匹配分别测试
   成功：在T 中，随机取出长度为m的字串作为P；分析平均复杂度
   失败：采用随机的P；统计平均复杂度
version 1
int match( char *P, char *T){
   size_t n = strlen(T),i = 0;
   size_t m = strlen(P),j = 0;
   while( j < m && i < n)
     if(T[i] = P[j]) {i++; j++;}
     else {i-= j-1; j = 0;}
   return i - j;
} // i - j > = n -m

version 2
int match( char *P, char *T){
   size_t n = strlen(T),i = 0;
   size_t m = strlen(P),j = 0;
   for ( i =0; i < n-m+1; i++){
     for ( j =0; j < m; j ++)
       if( T[i + j] != P[j]) break;
     if(m <=j) break; 
   }
   return i;
 }
 
 复杂度
 最好O(m)
 最坏O(m*(n-m+1))
 
 不变性：T[i-j,i) ==P[0,j) T[i]!=P[j]
 int match( char *P, char *T){
   int * next = buildNext(P); 
   size_t n = strlen(T),i = 0;
   size_t m = strlen(P),j = 0;
   while ( j < m && i < n )
     if ( 0 > j || T[i] == P[j]){ i++; j++; }
     else  j = next[j];
   delete [] next;
   return i - j;
 }
 长度为t的真前缀和长度为t的真后缀相同即
 N(P,j) = { 0<=t <j | P[0,t) ==P[j-t,j)} 
Next[0] = -1; 通配哨兵

构造 next[]表
P[0,j) x P(j,m)
    P[0,n(j)) x P(n(j),m)
next[j+1] <= next[j] + 1 (P[j] == P[next[j]] 时取等) 
next[j+1] = 1 + next[j] / 1 + next[next[j]] / ......
序列严格递减，且必收敛于 1+next[0] = 0;
int *build( char *P){
  size_t m =strlen(P),j = 0;
  int * N = new int[m];
  int t = N[0] = -1;
  while ( j < m-1 )
    if ( 0 > t || P[j] == P[t])
      N[ ++j] = ++t; -->[ j++;t++; N[j] = (P[j]!=P[t]?t:N[t]);]
    else
      t = N[t];
  return N;
  失败情况：
}
KMP复杂度分摊分析：
 令 k = 2 * i -j
    while ( j < m && i < n )//k单调递增，算法结束 k = 2*i - j <=2*(n-1) -(-1) = O(n)
     if ( 0 > j || T[i] == P[j]){ i++; j++; } // k + 1
     else  j = next[j]; // k + (>=1)
再改进
  T =  0 0 0 1 0 0 0 0 1
  P =  0 0 0 0 1 
  --------------------
  BM算法：坏字符
  某趟扫描中，一旦发现T[i+j] = X != Y =P[j],则P相应的右移
  位移量取决于失配位置j，以及X在P中的秩
  令bc[X] = rank[X] = j - shift
  构造bc[]
  int * buildBC( char * P){
    int *bc = new int[256];
    for ( size_t j = 0; j <256; j++)
      bc[j] = -1;
    for ( size_t m = strlen(P), j = 0; j < m; j++)
      bc[P[j]] = j ; 刷新P[j]的出现位置记录(画家算法：后来覆盖以往的)
    return bc;  
  }
  复杂度：
    最好O(n/m)
    最坏O(n*m)
 ------------------------------------
 BM_GS：
   P[j-1] = (P[j] == P[next[k]])?
                   (P[j-1] != P[k-1]? k-1:next[k-1])
                  : k = next[k];
   MS[j]:P[0,j]的所有后缀中，与P的某一后缀匹配的最长者
   ss[j] = |MS[j]| = max{ 0 <= s <= j+1 | P(j-s,j] = P[m-s,m)}
   ss[] ->gs[]
   若ss[j] = j + 1,则对于任一字符P[i] (i < m-j-1) m-j-1必是gs[i]的一个候选
   若ss[j] <= j,则 对于任一字符P[m-ss[j]-1] m-j-1必是gs[m-ss[j]-1]的一个候选
  -----------------------------------
  Karp-Rabin 算法
  散列：
    冲突
