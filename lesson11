串
由来自字母表的字符构成的有限序列
S[0,n)  S[k]
相等： S[0,n) = T[0,m) ( n = m, 且对应的字符均相等)
子串 S.substr(i, k) = S[i, i+k), 0 <=i < n, 0 <=k
   即，从S[i]起的连续k个字符
前缀：S.prefix(k) = S.substr(0,k) = S[0,k)
空串和本身是任何串的字串、前缀、后缀

串匹配：
% grep <pattern> <text>
文本T 模式P
记 n = |T|, m = |P| , n>>m>>2
算法评测：
 随机T堆成功、失败的匹配分别测试
   成功：在T 中，随机取出长度为m的字串作为P；分析平均复杂度
   失败：采用随机的P；统计平均复杂度
version 1
int match( char *P, char *T){
   size_t n = strlen(T),i = 0;
   size_t m = strlen(P),j = 0;
   while( j < m && i < n)
     if(T[i] = P[j]) {i++; j++;}
     else {i-= j-1; j = 0;}
   return i - j;
} // i - j > = n -m

version 2
int match( char *P, char *T){
   size_t n = strlen(T),i = 0;
   size_t m = strlen(P),j = 0;
   for ( i =0; i < n-m+1; i++){
     for ( j =0; j < m; j ++)
       if( T[i + j] != P[j]) break;
     if(m <=j) break; 
   }
   return i;
 }
 
 复杂度
 最好O(m)
 最坏O(m*(n-m+1))
 
 不变性：T[i-j,i) ==P[0,j) T[i]!=P[j]
 int match( char *P, char *T){
   int * next = buildNext(P); 
   size_t n = strlen(T),i = 0;
   size_t m = strlen(P),j = 0;
   while ( j < m && i < n )
     if ( 0 > j || T[i] == P[j]){ i++; j++; }
     else  j = next[j];
   delete [] next;
   return i - j;
 }
 长度为t的真前缀和长度为t的真后缀相同即
 N(P,j) = { 0<=t <j | P[0,t) ==P[j-t,j)} 
