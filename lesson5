              Vector      List
search        efficient   inefficient
insert/remove inefficient efficient

        二叉树：
          树是特殊的图，节点数|V|=n 边数|E|=e
                r
                |
             / | | \
            r1 r2 r3... rd 
            ri称作r的孩子(child)，ri之间互称兄弟(sibling),r为父亲(parent)
            d=degree(r) 为 r的（出）度
           边数之和等于度数之和等于顶点数-1=O(n)
           在兄弟之间定义次序的树称为有序树。
           
           路径长度：|pi| =边数
           深度是到根节点的距离
           所有叶子深度中最大者称作（子）树（根）的高度，空树高度为-1
           树的表示方法：
             1 父亲 + 孩子 
             2 长子 + 兄弟
           节点度数不超过2的树，称作二叉树  
           lchild() ~ lSubtree
           rchild() ~ rSubtree
           深度为k的节点，至多2^k个
           含n个节点、高度为h的二叉树中 h < n < 2 ^(h + 1)
           1) n = h + 1; 退化为一条单链
           2) n = 2^(h+1) -1;即所谓的满二叉树
           
           真二叉树
           假想添加出度为0，使出度节点数变为2
           
           多叉树
           二叉树是多叉树的特例，但在有根、有序时，其描述能力足以覆盖后者，方法 长子-兄弟 表示法
           
            |
           / \
          fc  ns  
        BinNode :
        #define BinNodePosi(T) BinNode<T>* // 节点位置
        template <typename T> struct BinNode{
          BinNodePosi(T) parent, lchild, rchild; 
          T data; int height; int size();  //高度、子树规模 
          BinNodePosi(T) insertAsLC( T const &);//作为左孩子插入新节点
          BinNodePosi(T) insertAsRc( T const &);//作为右孩子插入新节点
          BinNodePosi(T) succ;//(中序遍历意义下) 当前节点的直接后继
          template <typename VST> void travLevel ( VST &); //子树层次遍历
          template <typename VST> void traVPre (VST &); //子树先序遍历
          template <typename VST> void travIn( VST &); //子树中序遍历
          template <typename VST> void travPost (VST &);//子树后序遍历
        }
        
        insertAsLC(T const & e){
          return lchild = new BinNode(e,this);
        }
        insertAsRC(T const & e){
          return rchild = new BinNode(e,this);
        }
        size (){
           int s = 1;
           if (lchild) s + = lchild ->size();
           if (rchild) s + = rchild ->size();
           return s;
        }//O(n)
        
        BinTree
        template <typename T> class BinTree{
          protected:
            int _size;
            BinNodePosi(T) _root;
            virtual int updateHeight (BinNodePosi(T) x); //根新节点x的高度
            void updateHeightAbove (BinNodePosi(T) x);   //更新x及祖先的高度
          public :
            int size(){return _size;}
            bool empty() const{ return !_root;}
            BinNodePosi(T) root() const {return _root;}
        }
        #define stature(p){return (p)? (p)->height:-1;}
        int BinTree<T>::updateHeight (BinNode(T) x){
          return x->height = 1 + 
              max(stature (x->lchild),stature(x -> rchild));   
        }
        void BinTree<T>::updateHeightAbove (BinNodePosi(T) x){
          while (x){
            updateHeight(x);
            x = x->parent;
          }
        BinNodePosi(T) BinTree<T>::insertAsRC(BinNodePosi(T) x, T const & e) {
          _size++; 
          x->insertAsRC(e);
          updateHeightAbove(x);
          return x->rchild; 
        }
        ----------------------------------------------------------------------
        先序遍历：
            半线性->线性
            V
          L   R
          先序 V|L|R  中序 L|V|R   后序 L|R|V  层次/广度
          递归实现
          template<typename T,typename VST>
          void traverse ( BinNodePosi(T) x ,VST & visit){
            if (!x) return;
            visit(x->data);
            traverse(x ->lChild,visit);
            traverse(x ->rchild,visit);
          }
          迭代实现1
          template<typename T,typename VST>
          void travPre_I1 (BinNodePosi(T) x, VST $ visit){
            Stack<BinNodePosi(T)> S;
            if(x) S.push(x);
            while (!S.empty()){
              x = S.pop();
              visit(x ->data);
              if(HasRChild(*x)) S.push(x->rchild);
              if(HasLChild(*x)) S.push(x->lchild); 
          }
          迭代实现2
          template<typename T,typename VST>
          static void viitAlongLeftBranch(
            BinNodePosi(T) x,
            VST & visit,
            Stack <BinNodePosi(T)> & S
          ){
            while (x){
              visit( x->data);
              S.push(x ->rChild);
              x = x->lChild
          }
           void travPre_I2(BinNodePosi(T) x , VST & visit){
             Stack <BinNodePosi(T)> S;
             while(true){
               visitAlongLeftBranch( x ,visit, S);
               if (S.empty()) break;
               x = S.pop();
             }
          ---------------------------------
          中序遍历
          template<typename T,typename VST>
          void travse (BinNodePosi(T) x, VST $ visit){
             if (!x) return;
             traverse(x->lChild,visit);
             visit(x->data);
             traverse(x->rChild,visit);
           }
          
